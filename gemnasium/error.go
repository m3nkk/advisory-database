package main

import (
	"fmt"
	"strings"
)

type ErrUnexpectedStatus struct {
	statusCode int
	status     string
}

func (e ErrUnexpectedStatus) Error() string {
	return fmt.Sprintf("unexpected status: %d %s", e.statusCode, e.status)
}

type InputError struct {
	ErrorMsg string `json:"error"`
	Field    string `json:"field,omitempty"`
	Details  string `json:"details,omitempty"`
	Value    string `json:"value,omitempty"`
}

func (err InputError) Error() string {
	parts := []string{}
	if err.Field != "" {
		parts = append(parts, err.Field)
	}
	if err.Value != "" {
		parts = append(parts, err.Value)
	}
	if len(parts) > 0 {
		return strings.Join(parts, ", ") + ": " + err.ErrorMsg
	} else {
		return err.ErrorMsg
	}
}

type InputErrors []InputError

func (errs InputErrors) Error() string {
	parts := []string{}
	for _, err := range errs {
		parts = append(parts, err.Error())
	}
	return strings.Join(parts, "\n")
}

type ErrWrongNumberOfArgs struct {
	expected int
}

func (e ErrWrongNumberOfArgs) Error() string {
	return fmt.Sprintf("wrong number of arguments, expected %d arg(s)", e.expected)
}
