#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'date'

def search_files(dir, pattern)
  Dir[File.join(dir, '**', pattern)].map { |file| File.basename(file) }.sort
end

def validate_identifiers(dir)
  base = search_files(dir, 'GMS*.yml').group_by { |file| file }
  duplicate_filter = base.filter { |_, v| v.count != 1 }.first

  unless duplicate_filter.nil?
    puts "There is a duplicate identifier: #{duplicate_filter.first}"
    return false
  end

  true
end

def generate_new_identifier(dir)
  file_list = search_files(dir, "GMS-#{Date.today.year}-*").to_a
  return "GMS-#{Date.today.year}-1" if file_list.empty?

  latest_file = file_list.last
  latest = File.basename(latest_file, File.extname(latest_file)).split('-')[2]

  "GMS-#{Date.today.year}-#{latest.to_i + 1}"
end

banner = 'Usage: identifier.rb [-v|-n] <path>'

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: identifier.rb [options]'

  opts.on('-v', '--validate', 'validate whether identifiers are unique') do |v|
    options[:validate] = v
  end
  opts.on('-n', '--new', 'obtain a new identifier') do |v|
    options[:new] = v
  end
end.parse!

unless (options[:new] == true || options[:validate] == true) && ARGV.size == 1
  puts banner
  exit(1)
end

searchdir = ARGV[0]

unless Dir.exist?(searchdir)
  puts "directory '#{searchdir}' does not exist"
  exit 1
end

if options[:new]
  puts generate_new_identifier(searchdir)
elsif options[:validate]
  exit(1) unless validate_identifiers(searchdir)
  puts "No duplicate 'GMS' identifiers found"
end

exit(0)
