#!/usr/bin/env ruby
# frozen_string_literal: true

require 'yaml'
require 'json'
require 'json-schema'
require 'optparse'

current_dir = File.dirname(__FILE__)
schema_file = File.join(current_dir, 'schema.json')
$schema = JSON.parse(File.read(schema_file))
$uuids = []

def validate_semantics(yaml_dict)
  validate_mutually_exclusive_versions(yaml_dict)
end

def validate_mutually_exclusive_versions(yaml_dict)
  require_relative '../advisory-db-curation-tools/adbcurate/lib/adb_santize'

  errors = []

  raw_fixed = yaml_dict['fixed_versions']
  raw_affected = yaml_dict['affected_range']

  # e.g. maven/org.apache.thrift/ABCD
  package_type_str = yaml_dict['package_slug'].split('/').first
  package_type = PackageType.package_type_from_string(package_type_str)
  version_interval_strs = AdbSanitize.version_translate(package_type, raw_affected)
  
  affected_versions = VersionRange.new
  version_interval_strs.each do |version_interval_str|
    affected_versions << VersionParser.parse(version_interval_str)
  end

  raw_fixed.each do |raw_fixed_str|
    version = VersionParser.parse('=' + raw_fixed_str)
    if affected_versions.overlaps_with?(version)
      errors << "Fixed version #{raw_fixed_str} may not also be affected (#{affected_versions.to_s})"
    end
  end

  errors
end

def validation_errors(yaml_file, semantic=false)
  errors = []
  begin
    yaml_dict = YAML.load_file(yaml_file)
    errors = JSON::Validator.fully_validate($schema, yaml_dict.to_json)
    # validate whether path to avisory is consistent with package slug
    target_file = "#{File.join(yaml_dict['package_slug'], yaml_dict['identifier'])}.yml"
    unless yaml_file == target_file
      errors << "detected inconsistencies between package slug and file for #{yaml_file}"
    end

    if $uuids.include?(yaml_dict['uuid'])
      errors << "uuid duplicate detected #{yaml_dict['uuid']}"
      return err
    else
      $uuids << yaml_dict['uuid']
    end

    if semantic
      errors += validate_semantics(yaml_dict)
    end
  rescue StandardError => e
    errors << e.message
  end
  errors
end

def obtain_yaml_files(path)
  File.directory?(path) ? Dir.glob("#{path}/**/*.yml") : [path]
end

options = {
  semantic: false,
}
optparse = OptionParser.new do |opts|
  opts.banner = "#{$PROGRAM_NAME} [-s] <path0> <path1> ... <pathN>"

  opts.on('-s', '--semantic', 'Include semantic tests. Requires advisory-db-curation-tools')
  opts.on('-h', '--help', 'Print this help') do
    puts opts
    puts "\nPath can be a yaml file and/or a directory"
    exit(1)
  end
end
optparse.parse!(into: options)

if ARGV.empty?
  puts "At least one file/directory is required\n"
  puts optparse.help
  exit(1)
end

# ensure all provided paths exist
if ARGV.reject { |path| File.exist?(path) }.any?
  puts "Not all provided paths exist\n\n"
  puts optparse.help
  exit(1)
end

ARGV.flat_map { |path| obtain_yaml_files(path) }.each do |yaml_file|
  next if %w[unknown].include?(File.basename(yaml_file, '.yml'))

  errors = validation_errors(yaml_file, semantic=options[:semantic])
  if errors.any?
    puts "#{yaml_file} is invalid: #{errors.join('; ')}"
    exit(1)
  end
end

puts 'All yaml files are valid'
exit(0)
