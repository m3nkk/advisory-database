#!/usr/bin/env ruby
# frozen_string_literal: true

require 'net/http'
require 'uri'
require 'nokogiri'
require 'open-uri'
require 'openssl'
require 'zlib'
require 'json'
require 'csv'

def grab_file(link, target_dir)
  puts link
  fileuri = URI.parse(link)
  filebase = File.basename(fileuri.path, '.gz')
  source = open(fileuri)
  gz = Zlib::GzipReader.new(source)
  target_file = File.join(target_dir, filebase)
  open(target_file, 'wb') do |file|
    puts "write #{target_file}"
    file << gz.read
  end
  JSON.load(File.open(target_file))['CVE_Items'].count
end


OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE

url = 'https://nvd.nist.gov/vuln/data-feeds'
download = false

if ARGV.length != 1
  puts "usage ./collect_feed_nvd.rb <out-dir>"
  exit(-1)
end

target_dir = ARGV[0]

unless Dir.exist?(target_dir)
  puts "usage ./collect_feed_nvd.rb <out-dir>"
  exit(-1)
end

nvd_csv = CSV.open(File.join(target_dir, "nvd.csv"), "a")

2003.upto(2019) do |d|
  cve = "CVE-#{d}"
  puts cve
  if target_dir.length <= 0 || !File.exist?(target_dir) || !File.directory?(target_dir)
    puts "please provide valid CVE and valid target directory"
    exit(-1)
  end

  Nokogiri::HTML(URI.open(url)).xpath('//*[@id="page-content"]/div[3]/div/table/tbody/tr').each do |row|
    if row['class'] == 'xml-feed-desc-row'
      cve_to_look_for = row.xpath("./td[1]").text
      download = cve_to_look_for == cve
    elsif row['class'] == 'xml-feed-data-row' && download
      link = row.xpath("./td/a")[0]['href']
      nvd_csv << [ "#{d}", grab_file(link, target_dir) ]
      download = false
    end
  end
end
nvd_csv.close
